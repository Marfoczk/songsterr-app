{"version":3,"sources":["components/Buttons/Buttons.module.scss","App.module.scss","components/Result/Results.module.scss","components/Results/Results.module.scss","components/Buttons/Buttons.jsx","components/Result/Result.jsx","components/Results/Results.jsx","App.jsx","serviceWorker.js","index.js"],"names":["module","exports","Buttons","tabs","onButtonClick","selectedTab","className","styles","container","map","tab","index","button","selectedButton","key","onClick","Result","title","name","id","tabTypes","URL","style","result","href","resultTabulars","Results","results","isLoading","filter","includes","artist","TABS","App","useState","setResults","search","setSearch","setSelectedTab","setIsLoading","fetchSongs","e","a","preventDefault","fetch","res","json","data","app","form","onSubmit","input","type","value","onChange","target","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"8FACAA,EAAOC,QAAU,CAAC,UAAY,2BAA2B,OAAS,wBAAwB,eAAiB,kC,gBCA3GD,EAAOC,QAAU,CAAC,IAAM,iBAAiB,KAAO,kBAAkB,MAAQ,mBAAmB,OAAS,sB,kBCAtGD,EAAOC,QAAU,CAAC,OAAS,wBAAwB,eAAiB,kC,mBCApED,EAAOC,QAAU,CAAC,QAAU,2B,4JCgBbC,EAdC,SAAC,GAAD,IAAGC,EAAH,EAAGA,KAAMC,EAAT,EAASA,cAAeC,EAAxB,EAAwBA,YAAxB,OACd,yBAAKC,UAAWC,IAAOC,WACpBL,EAAKM,KAAI,SAACC,EAAKC,GAAN,OACR,4BACEL,UAAWD,IAAgBK,EAAhB,UAAyBH,IAAOK,OAAhC,YAA0CL,IAAOM,gBAAmBN,IAAOK,OACtFE,IAAG,cAASH,GACZI,QAAS,kBAAMX,EAAcM,KAE5BA,Q,gBCUMM,EAlBA,SAAC,GAAmC,IAAjCC,EAAgC,EAAhCA,MAAOC,EAAyB,EAAzBA,KAAMC,EAAmB,EAAnBA,GAAIC,EAAe,EAAfA,SAC3BC,EAAG,0CAAsCH,EAAtC,YAA8CD,EAA9C,mBAA8DE,GAEvE,OACE,wBAAIb,UAAWgB,IAAMC,QACnB,uBAAGC,KAAMH,GACP,gCAASJ,GADX,MAC8BC,GAE9B,wBAAIZ,UAAWgB,IAAMG,gBACnB,8CACCL,EAASX,KAAI,SAACC,EAAKC,GAAN,OACZ,wBAAIG,IAAG,cAASH,IAAUD,S,gBCUrBgB,EApBC,SAAC,GAAD,IAAGC,EAAH,EAAGA,QAAStB,EAAZ,EAAYA,YAAZ,SAAyBuB,UAE3B,aACV,wBAAItB,UAAWC,IAAOoB,SACnBA,EACEE,QAAO,SAAAN,GAAM,OACZlB,GAAckB,EAAOH,SAASU,SAASzB,MAExCI,KAAI,SAACc,EAAQZ,GAAT,OACH,kBAAC,EAAD,CACEG,IAAKH,EACLM,MAAOM,EAAON,MACdC,KAAMK,EAAOQ,OAAOb,KACpBE,SAAUG,EAAOH,SACjBD,GAAII,EAAOJ,U,gBCbjBa,EAAO,CAAC,SAAU,SAAU,gBAAiB,mBA0CpCC,MAxCf,WAAgB,IAAD,EACiBC,mBAAS,IAD1B,mBACNP,EADM,KACGQ,EADH,OAEeD,mBAAS,IAFxB,mBAENE,EAFM,KAEEC,EAFF,OAGyBH,qBAHzB,mBAGN7B,EAHM,KAGOiC,EAHP,OAIqBJ,oBAAS,GAJ9B,mBAINN,EAJM,KAIKW,EAJL,KAMPC,EAAU,uCAAG,WAAMC,GAAN,iBAAAC,EAAA,6DACjBD,EAAEE,iBACFJ,GAAa,GAFI,SAGCK,MAAM,oDAAD,OAC+BR,IAJrC,cAGXS,EAHW,gBAMEA,EAAIC,OANN,OAMXC,EANW,OAOjBZ,EAAWY,GACXR,GAAa,GARI,4CAAH,sDAehB,OACE,yBAAKjC,UAAWC,IAAOyC,KACrB,0BAAM1C,UAAWC,IAAO0C,KAAMC,SAAUV,GACtC,2BACElC,UAAWC,IAAO4C,MAClBC,KAAK,OACLC,MAAOjB,EACPkB,SAXa,SAAAb,GACnBJ,EAAUI,EAAEc,OAAOF,UAYf,4BAAQ/C,UAAWC,IAAOK,OAAQwC,KAAK,UAAvC,UAGA,kBAAC,EAAD,CAASjD,KAAM6B,EAAM5B,cAAekC,EAAgBjC,YAAaA,KAEnE,kBAAC,EAAD,CAASsB,QAASA,EAAStB,YAAaA,EAAauB,UAAWA,MC9BlD4B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD8H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.643df426.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Buttons_container__cXUWZ\",\"button\":\"Buttons_button__NkWKo\",\"selectedButton\":\"Buttons_selectedButton__1z-dT\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"app\":\"App_app__7nOkk\",\"form\":\"App_form__1zp3T\",\"input\":\"App_input__3HKjz\",\"button\":\"App_button__wz3WK\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"result\":\"Results_result__2fCOH\",\"resultTabulars\":\"Results_resultTabulars__11TIq\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"results\":\"Results_results__1W5kK\"};","import React from \"react\";\nimport styles from \"./Buttons.module.scss\";\n\nconst Buttons = ({ tabs, onButtonClick, selectedTab }) => (\n  <div className={styles.container}>\n    {tabs.map((tab, index) => (\n      <button\n        className={selectedTab === tab ? `${styles.button} ${styles.selectedButton}` : styles.button}\n        key={`btn-${index}`}\n        onClick={() => onButtonClick(tab)}\n      >\n        {tab}\n      </button>\n    ))}\n  </div>\n);\n\nexport default Buttons;\n","import React from \"react\";\nimport style from \"./Results.module.scss\";\n\nconst Result = ({ title, name, id, tabTypes }) => {\n  const URL = `https://www.songsterr.com/a/wsa/${name}-${title}-tab-g-s${id}`;\n\n  return (\n    <li className={style.result}>\n      <a href={URL}>\n        <strong>{title}</strong> - {name}\n      </a>\n      <ol className={style.resultTabulars}>\n        <p>Tabular types: </p>\n        {tabTypes.map((tab, index) => (\n          <li key={`tab-${index}`}>{tab}</li>\n        ))}\n      </ol>\n    </li>\n  );\n};\n\nexport default Result;\n","import React from \"react\";\nimport Result from \"../Result/Result\";\nimport styles from \"./Results.module.scss\";\n\nconst Results = ({ results, selectedTab, isLoading }) => (\n\n  isLoading ? 'Loading...' :\n    <ul className={styles.results}>\n      {results\n        .filter(result =>\n          selectedTab ? result.tabTypes.includes(selectedTab) : true\n        )\n        .map((result, index) => (\n          <Result\n            key={index}\n            title={result.title}\n            name={result.artist.name}\n            tabTypes={result.tabTypes}\n            id={result.id}\n          />\n        ))}\n    </ul>\n);\n\nexport default Results;\n","import React, { useState } from \"react\";\nimport Buttons from \"./components/Buttons/Buttons\";\nimport Results from \"./components/Results/Results\";\nimport styles from \"./App.module.scss\";\n\nconst TABS = [\"PLAYER\", \"CHORDS\", \"TEXT_BASS_TAB\", \"TEXT_GUITAR_TAB\"];\n\nfunction App() {\n  const [results, setResults] = useState([]);\n  const [search, setSearch] = useState(\"\");\n  const [selectedTab, setSelectedTab] = useState();\n  const [isLoading, setIsLoading] = useState(false);\n\n  const fetchSongs = async e => {\n    e.preventDefault();\n    setIsLoading(true);\n    const res = await fetch(\n      `http://www.songsterr.com/a/ra/songs.json?pattern=${search}`\n    );\n    const data = await res.json();\n    setResults(data);\n    setIsLoading(false);\n  };\n\n  const updateSearch = e => {\n    setSearch(e.target.value);\n  };\n\n  return (\n    <div className={styles.app}>\n      <form className={styles.form} onSubmit={fetchSongs}>\n        <input\n          className={styles.input}\n          type=\"text\"\n          value={search}\n          onChange={updateSearch}\n        />\n        <button className={styles.button} type=\"submit\">\n          Search\n        </button>\n        <Buttons tabs={TABS} onButtonClick={setSelectedTab} selectedTab={selectedTab} />\n      </form>\n      <Results results={results} selectedTab={selectedTab} isLoading={isLoading} />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}